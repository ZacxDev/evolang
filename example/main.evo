model User {
  UserId: String
  Name: String
  Email: String
  Lists: [TodoList] @linkedBy(.CreatorId)
  AdminOf: [TodoList] @references(.AdminIds)
}

model TodoList {
  ListId: Int
  Name: String
  CreatorId: User @references(.UserId)
  AdminsIds: [User] @references(.AdminOf)
  Items: [TodoItem] @linkedBy(.ListId)
}

enum CallerType {
  User
  System
}

model Caller {
  ID: String
  Type: CallerType
}

rule {
  isCallerTodoListCreator: (caller Caller, obj TodoList) {
    if caller.UserId == obj.CreatorId {
      return true
    }

    return false
  }

  isCallerTodoListAdmin: (caller Caller, obj TodoList) {
    if caller.UserId in obj.AdminIds {
      return true
    }

    return false
  }
}

mutation {
  AddItem: (caller Caller, newItem TodoListAddItemInput) {
    Middleware: {
      list = newItem.TodoListId.ResolveModel()
      isCreator = Rule.isCallerTodoListCreator(caller, list)
      isAdmin = Rule.isCallerTodoListAdmin(caller, list)

      return isCreator || isAdmin
    }
    Function: {
      [sandbox lang="go" define={ newItem }]
        // TODO: add some way to inject values into the sandbox
        fmt.Printf("Adding item to list with id %v: %+v", newItem.TodoListId, newItem.TodoListItem)
      [/sandbox]
    }
  }
}

input TodoListAddItemInput {
  TodoListId: Int @references(TodoList.ListId)
  TodoListItem: TodoListItemInput
}

input TodoListItemInput {
  Description: String
  Status: Status
}

model TodoItem {
  ItemId: Int
  Description: String
  Status: Status
  ListId: TodoList @references(.ListId)
  LastEditedBy: User @references(.UserId)

  events {
    #.Status: (oldStatus, newStatus) {
      [sandbox lang="go"]
          if newStatus == Status.Completed {
              // Go code to send an email
              email.Send("user@example.com", "TODO Item Completed", "Your TODO item is now completed.")
          }
      [/sandbox]
    }
  }
}

enum Status {
  Pending
  InProgress
  Completed
}

main {
  print("Starting server...")
  MyServer.Listen(8080)
}
